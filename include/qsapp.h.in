#ifndef __qsapp_h__
#define __qsapp_h__

#include <inttypes.h>
#include <stdbool.h>
#include <stdio.h>

/** \file
 *
 * The libquickstream application programming interface (API)
 *
 * You can link your C and C++ code with the libquickstrean library to
 * make quickstream programs that load quickstream filter modules,
 * assemble these filters into flow graphs, and run the flow graphs.
 *
 * You can do the same with the program \ref quickstream_program.
 *
 *
 * The following terms are used in function names:
 *
 * API objects
 *
 * - **Qs app**     a collection of loaded filter module plugins,
 *                  a collection of streams
 *                  an application container for all that is quickstream
 *
 * - **Qs stream**  a directed graph of filters,
 *                  a mapping of filters to threads,
 *                  a mapping of threads to processes, and
 *                  an interface to run the stream
 *
 * - **Qs filter**  a filter module plugin from a dynamic shared object
 *                  file
 *
 * - **Qs process** an operating system process
 *
 * - **Qs thread**  an operating system thread (pthread)
 *
 */ 


/** quickstream release version number
 *
 * This release version number is not necessarily the same as library
 * version numbers.
 */
// Change this QS_VERSION macro string to make a new version.
#define QS_VERSION "@PACKAGE_VERSION@"

/** Read the last quickstream error string
 *
 * Calling this function also clears the current error.  This interface is
 * defective, in that new errors in other threads may overwrite the
 * internal error string before it can be read with this, or by any
 * other thread.  Per-thread error strings create other issues.
 *
 * To clear the current error, if there is one or not, call
 * qsError().  This can be called without checking if there is an
 * error or not.
 *
 * \return a pointer to a string, or 0 if there is no error.  The
 * memory for the string is managed by the qsError() function.
 *
 *  \todo add error return int values that correspond to strings.
 */
extern
const char *qsError(void);


/** Create the highest level quickstream construct,
 * a quickstream app.
 *
 * \return a pointer to an app structure, or 0 on failure*/
extern
struct QsApp *qsAppCreate(void);


extern
int qsAppDestroy(struct QsApp *app);


/** Add a filter module to the list of filter modules to be loaded.
 *
 * If the filter is successfully loaded and a construct symbol is found
 * the construct will be called as a function with some arguments.  See
 * \ref construct().
 *
 * \param app that was returned from a call to qsAppCreate().
 * \param fileName that refers to the plugin module file.
 * \param loadName a made-up unquie name that was refer to this
 * loaded plugin module.  loadName=0 maybe passed in to have the
 * name generated based on fileName.
 * \param argc is the number of string argument in argv.
 * \param argv is 0 or a pointer to an array of strings.  Do not count
 * on argv being 0 (null) terminated.
 *
 * \return 0 on success.
 *
 * \see qsFilterUnload().
 */
extern
struct QsFilter *qsAppFilterLoad(struct QsApp *app,
        const char *fileName,
        const char *loadName,
        int argc, const char **argv);


/** Print the help for the filter module
 *
 */
extern
int qsFilterPrintHelp(const char *filterName, FILE *f);


enum QsAppPrintLevel {
    QsPrintOutline = 0,
    QsPrintDebug = 3
};


/** Print a vizgraph dot image file the represents the stream graphs.
 *
 *
 * \seealso
 */

extern
int qsAppPrintDotToFile(struct QsApp *app, enum QsAppPrintLevel l,
        FILE *file);


/** Display an image of the flow graphs.
 *
 * This will fork and run the imagemagick "display" program.  This calls
 * qsAppPrintDotToFile().
 *
 * \param app an app object that was returned from qsAppCreate().
 *
 * \param l the level of detail to print.  \ref QsPrintOutline to print
 * just an outline and \ref QsPrintDebug to print more inner details.
 *
 * \param waitForDisplay if set this will not return until the
 * display program exits.
 *
 * \return 0 on success.
 */
extern
int qsAppDisplayFlowImage(struct QsApp *app, enum QsAppPrintLevel l,
        bool waitForDisplay);


/** Unload a filter module and cleanup it's resources.
 *
 * qsFilterUnload() will also remove the filter from any stream it has
 * been added to.
 *
 * /return 0 on success.
 */
extern
int qsFilterUnload(struct QsFilter *filter);


extern
struct QsStream *qsAppStreamCreate(struct QsApp *app);


/** allow or disallow loops in the stream\
 *
 * By default the stream does not allow loops in the filter stream graph.
 *
 * \param stream is the stream that we are allowing or disallowing loops
 * in.
 *
 * \param doAllow Pass the doAllow value of true to set allowing loops in
 * the stream graph.  Pass in doAllow value of false to not allow loops in the
 * stream graph.
 */
extern
void qsStreamAllowLoops(struct QsStream *stream, bool doAllow);

extern
int qsStreamDestroy(struct QsStream *stream);

/** Remove a filter and it's connections from a stream
 *
 * This does not unload the filter module plugin.  Use qsFilterUnload() to
 * unload and cleanup filter module resources.  
 *
 * \return 0 if the filter was found and removed, and non-zero otherwise.
 */
extern
int qsStreamRemoveFilter(struct QsStream *stream, struct QsFilter *filter);

extern
int qsStreamConnectFilters(struct QsStream *stream,
        struct QsFilter *from, struct QsFilter *to);



/** Run the stream flow with one feed input() call to each source filter
 * in this stream.
 *
 * Run one loop.
 *
 * This call may block, waiting for flow congestion, or a filter in a
 * blocking input call.
 *
 * \param stream the stream object that has the filters that are
 * connected and qsStreamLaunch() was called for this stream.
 *
 * \return 0 to signal that the stream can continue running, and
 * non-zero when \todo bla bla bla.
 */
extern
uint32_t qsStreamFlow(struct QsStream *stream);


/** Launch threads and processes if they are needed, and get ready to
 * run the flow.
 *
 * Before returning, put the thread and processes in a blocking call
 * waiting for the flow.
 *
 * qsStreamLaunch() is called before qsStreamFlow().  Usually
 * qsStreamLaunch() is called once before many calls to qsStreamFlow().
 *
 * \param stream the stream object that has the filters that are
 * connected.
 *
 * \return 0 if the stream runs and non-zero on error.
 */
extern
int qsStreamLaunch(struct QsStream *stream);


/** Make ready the stream.
 *
 * Allocate resources for the stream to flow, but not the threads and
 * processes.
 *
 * qsStreamReady() will call all the filter start() functions and setup
 * the resources needed to start the stream flow, but it will not begin
 * the filter input() calls.  qsStreamLaunch() must be called after
 * qsStreamReady() in order to launch threads and processes if they are
 * needed.
 *
 * One could call qsAppDisplayFlowImage() after a call to
 * qsStreamPrestart() to have a look at the streams while they are setup,
 * but before they are running.  You can call qsAppDisplayFlowImage()
 * after the stream is running, but calling qsStreamReady() and then
 * qsAppDisplayFlowImage() will produce the same image without calling any
 * filter input() calls.
 *
 * \param stream the stream object that has the filters that are
 * connected.
 *
 * \return 0 if the stream runs and non-zero on error.
 */
extern
int qsStreamReady(struct QsStream *stream);



/** Stop the flow
 *
 * For a given stream qsStreamStop() be called after qsStreamStart().
 *
 */
extern
int qsStreamStop(struct QsStream *stream);



/** Create a thread object
 *
 * This does not start the thread.  It just sets up what threads
 * will be used when the stream runs.  See \ref qsStreamReady() and
 * \ref qsStreamStop().
 *
 * \param stream returned from qsAppStreamCreate().
 *
 * \return a pointer to a thread object, or 0 on failure.
 */
extern
struct QsThread *qsStreamThreadCreate(struct QsStream *stream);


extern
int qsThreadDestroy(struct QsThread *thread);


extern
int qsThreadAddFilter(struct QsThread *thread, struct QsFilter *filter);



#endif // #ifndef __qsapp_h__
